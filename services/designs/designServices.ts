import { CreateDesignParams, Design, DesignGuideline, DesignView } from "@/types/designs";
import { createClient } from "@/utils/supabase/ssr_client/server";


/**
 * Creates a new design instance for a specific store.
 * The Design_Id is now generated by the database by default.
 */
export async function createDesign({
	designGuideline,
	designName,
	imageUrl,
	storeCode,
	height = 7,
	width = 7,
}: CreateDesignParams): Promise<Design[]> {
	const supabase = await createClient();
	const {
		data: { user },
	} = await supabase.auth.getUser();

	if (!user) {
		throw new Error("User not authenticated to create a design.");
	}

	const { data, error } = await supabase
		.from("designs")
		.insert([
			{
				Design_Guideline: designGuideline,
				Image_URL: imageUrl,
				Design_Name: designName,
				user_id: user.id,
				store_code: storeCode,
				height,
				width,
			},
		])
		.select()

	if (error) {
		throw new Error(`Failed to create design: ${error.message}`);
	}

	return data || [];
}

/**
 * Fetches all available design guidelines from the 'design_guidelines' table.
 */
export async function getDesignGuidelines(): Promise<DesignGuideline[]> {
	const supabase = await createClient();
	const { data, error } = await supabase
		.from("design_guidelines")
		.select("*")

	if (error) {
		throw new Error(`Failed to fetch design guidelines: ${error.message}`);
	}

	return data || [];
}

export async function getExistingDesigns(storeCode: string): Promise<DesignView[]> {
	const supabase = await createClient();

	const {data: session} = await supabase.auth.getSession();

	if (!session) {
		throw new Error("User not authenticated to fetch designs.");
	}

	const { data, error } = await supabase
		.from("v_designs")
		.select("*")
		.eq("store_code", storeCode);

	if (error) {
		throw new Error(`Failed to fetch existing designs: ${error.message}`);
	}

	console.log(`Fetched Existing Designs in Store ${storeCode} : `, data)

	return data || [];
}
